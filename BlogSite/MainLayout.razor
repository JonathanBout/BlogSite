@using Microsoft.JSInterop.Infrastructure
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject NavigationManager Navigation

<header>
	<a href="/">@GetType().Assembly.GetName().Name!.Humanize()</a>
	<a @onclick='UpdateDropdown' id="dropdown-button"><span style="font-family: 'Cascadia Code', Courier New, Courier, monospace;">@arrow</span> Menu</a>
	@if (showItems || ViewportWidth > 700 || ViewportWidth < 0)
	{
		<a class="dropdown-item" href="/Latest">Latest</a>
		<a class="dropdown-item" href="/Archive">Archive</a>
	}
</header>
<main>
	@Body
</main>

@code{

    bool showItems = false;
    int ViewportWidth = -1;
    string arrow = "";
    const string ArrowUp = "▶";
    const string ArrowDown = "▼";

    void UpdateDropdown(bool expanded)
    {
        showItems = expanded;
        UpdateArrow(showItems);
    }

    void UpdateDropdown()
    {
        showItems = !showItems;
        UpdateArrow(showItems);
    }

    void UpdateArrow(bool up)
    {
        if (up)
        {
            if (arrow == ArrowDown) return;
            arrow = ArrowDown;
        }
        else
        {
            if (arrow == ArrowUp) return;
            arrow = ArrowUp;
        }
    }

    async Task<int> GetPixelWidth()
    {
        int vw = await JS.InvokeAsync<int>("GetDeviceWidth");
        return vw;
    }

    protected override void OnInitialized()
    {
        UpdateDropdown(true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        int vw = await GetPixelWidth();
        if (vw != ViewportWidth)
        {
            ViewportWidth = vw;
            StateHasChanged();
        }
    }

    [JSInvokable(nameof(Resize))]
    public void Resize()
    {
        StateHasChanged();
    }
}