@using Microsoft.JSInterop.Infrastructure
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject NavigationManager Navigation
@implements IDisposable
<CascadingValue Value="@CurrentUser">
<header>
	<a href="/">@GetType().Assembly.GetName().Name!.Humanize()</a>
	<a @onclick='() => UpdateDropdown()' id="dropdown-button"><span style="font-family: 'Cascadia Code', Courier New, Courier, monospace;">@arrow</span> Menu</a>
	@if (showItems || ViewportWidth > 700 || ViewportWidth < 0)
	{
		<a href="/Latest">Latest</a>
		<a href="/Archive/@(DateTime.Now.Year - 1)">Archive</a>
		<Authenticate>
			<Authenticated>
				<a href="/Account/Posts">My Posts</a>
			</Authenticated>
			<Authenticating>
				<a href="/Account/Posts">My Posts</a>
			</Authenticating>
			<NotAuthenticated>
			</NotAuthenticated>
		</Authenticate>
		<div class="spacer"></div>
		<div class="button">
			<Authenticate>
				<Authenticated>
					<a class="nolink" href="/Account">Account</a>
				</Authenticated>
				<Authenticating>
					<a class="nolink" href="/Account">Account</a>
				</Authenticating>
				<NotAuthenticated>
					<a class='nolink' href='/Login'>Login</a>
				</NotAuthenticated>
			</Authenticate>
		</div>
	}
</header>
<main>
		@Body
</main>
</CascadingValue>

@code{
	bool showItems = false;
	int ViewportWidth = -1;
	string arrow = "";
	const string ArrowUp = "▶";
	const string ArrowDown = "▼";
	public CascadingObject<User> CurrentUser { get; set; } = new CascadingObject<User>();

	bool UpdateDropdown(bool expanded)
	{
		showItems = expanded;
		return UpdateArrow(showItems);
	}

	bool UpdateDropdown()
	{
		showItems = !showItems;
		return UpdateArrow(showItems);
	}

	bool UpdateArrow(bool up)
	{
		if (up)
		{
			if (arrow == ArrowDown) return false;
			arrow = ArrowDown;
		}
		else
		{
			if (arrow == ArrowUp) return false;
			arrow = ArrowUp;
		}
		StateHasChanged();
		return true;
	}

	async Task<int> GetPixelWidth()
	{
		int vw = await JS.InvokeAsync<int>("GetDeviceWidth");
		return vw;
	}

	protected override async Task OnInitializedAsync()
	{
		CurrentUser.ValueChanged += StateHasChanged;
		UpdateDropdown(false);
		await JS.InvokeVoidAsync("GLOBAL.SetDotnetReference", DotNetObjectReference.Create(this));
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		int vw = await GetPixelWidth();
		if (vw != ViewportWidth)
		{
			ViewportWidth = vw;
			StateHasChanged();
		}
	}

	[JSInvokable(nameof(Resize))]
	public void Resize()
	{
		StateHasChanged();
	}

	void IDisposable.Dispose()
	{
		CurrentUser.ValueChanged -= StateHasChanged;
	}
}