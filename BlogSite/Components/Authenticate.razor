@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@implements IDisposable
@inject ProtectedLocalStorage LocalStorage
@inject ProtectedSessionStorage SessionStorage
@inject LoginManager Login
@if (IsAuthenticated)
{
	@Authenticated
}
else if (!TriedAuthentication)
{
	if (Authenticating is null)
	{
		<p>Authenticating...</p>
	}else
	{
		@Authenticating
	}
}else
{
	@if(NotAuthenticated is null)
	{
		<p>You are not logged in. <a>Login</a> or <a>Register</a> to continue.</p>
	}else
	{
		@NotAuthenticated
	}
}
@code {
	bool IsAuthenticated => CurrentUser.Value is not null;
	bool TriedAuthentication { get; set; } = false;
	[Parameter, EditorRequired]
	public RenderFragment Authenticated { get; set; } = null!;
	[Parameter]
	public RenderFragment? NotAuthenticated { get; set; } = null;
	[Parameter]
	public RenderFragment? Authenticating { get; set; } = null;
	[CascadingParameter]
	public CascadingObject<User> CurrentUser { get; set; } = null!;

	protected override void OnInitialized()
	{
		CurrentUser.ValueChanged += StateHasChanged;
	}

	protected override async Task OnInitializedAsync()
	{
		if (CurrentUser.Value is null &&! TriedAuthentication)
		{
			await TryAutoAuthenticate();
		}
		await base.OnInitializedAsync();
	}

	void IDisposable.Dispose()
	{
		CurrentUser.ValueChanged -= StateHasChanged;
	}

	async Task TryAutoAuthenticate()
	{
		TriedAuthentication = true;
		var info = await SessionStorage.GetAsync<string>("userinfo");
		if (!Try(info))
		{
			info = await LocalStorage  .GetAsync<string>("userinfo");
			if (!Try(info)) return;
		}
		StateHasChanged();
	}

	bool Try(ProtectedBrowserStorageResult<string> info)
	{
		if (info.Success && info.Value is not null)
		{
			if (Login.TryLogin(info.Value, out User? result) && result is not null)
			{
				CurrentUser.Value = result;
				return true;
			}
		}
		return false;
	}
}
